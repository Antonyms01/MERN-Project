{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERN\\\\Frontend\\\\myapp\\\\src\\\\Components\\\\Piechart.js\",\n  _s = $RefreshSig$();\n// src/components/PieChart.js\nimport React, { useEffect, useState } from 'react';\nimport { Pie } from 'react-chartjs-2';\nimport { getPieChartData } from '../api/api'; // Import your API function to fetch pie chart data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PieChart = ({\n  month\n}) => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      data: [],\n      backgroundColor: []\n    }]\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Function to fetch pie chart data based on the selected month\n  const fetchPieChartData = async () => {\n    setLoading(true);\n    try {\n      const data = await getPieChartData(month); // Fetch pie chart data from the API\n      // Process the data into chart format\n      const labels = data.map(item => item.range); // Assuming your API returns an array of objects with a `range` property\n      const values = data.map(item => item.count); // Assuming your API returns an array of objects with a `count` property\n\n      setChartData({\n        labels,\n        datasets: [{\n          data: values,\n          backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'] // Add more colors as needed\n        }]\n      });\n      setError(null); // Clear any previous errors\n    } catch (err) {\n      setError('Error fetching pie chart data');\n      setChartData({\n        labels: [],\n        datasets: [{\n          data: []\n        }]\n      }); // Clear chart data on error\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch pie chart data when the month changes\n  useEffect(() => {\n    fetchPieChartData(); // Fetch pie chart data when the component mounts or month changes\n  }, [month]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading pie chart...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Price Range Distribution for \", month]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Pie, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(PieChart, \"mC4X/aAzGqfYLp5hxPVBr674Dfg=\");\n_c = PieChart;\nexport default PieChart;\nvar _c;\n$RefreshReg$(_c, \"PieChart\");","map":{"version":3,"names":["React","useEffect","useState","Pie","getPieChartData","jsxDEV","_jsxDEV","PieChart","month","_s","chartData","setChartData","labels","datasets","data","backgroundColor","loading","setLoading","error","setError","fetchPieChartData","map","item","range","values","count","err","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/MERN/Frontend/myapp/src/Components/Piechart.js"],"sourcesContent":["// src/components/PieChart.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport { getPieChartData } from '../api/api'; // Import your API function to fetch pie chart data\r\n\r\nconst PieChart = ({ month }) => {\r\n    const [chartData, setChartData] = useState({\r\n        labels: [],\r\n        datasets: [{\r\n            data: [],\r\n            backgroundColor: [],\r\n        }],\r\n    });\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Function to fetch pie chart data based on the selected month\r\n    const fetchPieChartData = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await getPieChartData(month); // Fetch pie chart data from the API\r\n            // Process the data into chart format\r\n            const labels = data.map(item => item.range); // Assuming your API returns an array of objects with a `range` property\r\n            const values = data.map(item => item.count); // Assuming your API returns an array of objects with a `count` property\r\n\r\n            setChartData({\r\n                labels,\r\n                datasets: [{\r\n                    data: values,\r\n                    backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'], // Add more colors as needed\r\n                }],\r\n            });\r\n            setError(null); // Clear any previous errors\r\n        } catch (err) {\r\n            setError('Error fetching pie chart data');\r\n            setChartData({ labels: [], datasets: [{ data: [] }] }); // Clear chart data on error\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Fetch pie chart data when the month changes\r\n    useEffect(() => {\r\n        fetchPieChartData(); // Fetch pie chart data when the component mounts or month changes\r\n    }, [month]);\r\n\r\n    if (loading) return <div>Loading pie chart...</div>;\r\n    if (error) return <div>{error}</div>;\r\n\r\n    return (\r\n        <div>\r\n            <h3>Price Range Distribution for {month}</h3>\r\n            <Pie data={chartData} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PieChart;\r\n    "],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,GAAG,QAAQ,iBAAiB;AACrC,SAASC,eAAe,QAAQ,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAC5B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC;IACvCU,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE,CAAC;MACPC,IAAI,EAAE,EAAE;MACRC,eAAe,EAAE;IACrB,CAAC;EACL,CAAC,CAAC;EACF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMkB,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClCH,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACA,MAAMH,IAAI,GAAG,MAAMV,eAAe,CAACI,KAAK,CAAC,CAAC,CAAC;MAC3C;MACA,MAAMI,MAAM,GAAGE,IAAI,CAACO,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC;MAC7C,MAAMC,MAAM,GAAGV,IAAI,CAACO,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC;;MAE7Cd,YAAY,CAAC;QACTC,MAAM;QACNC,QAAQ,EAAE,CAAC;UACPC,IAAI,EAAEU,MAAM;UACZT,eAAe,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAE;QACzF,CAAC;MACL,CAAC,CAAC;MACFI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOO,GAAG,EAAE;MACVP,QAAQ,CAAC,+BAA+B,CAAC;MACzCR,YAAY,CAAC;QAAEC,MAAM,EAAE,EAAE;QAAEC,QAAQ,EAAE,CAAC;UAAEC,IAAI,EAAE;QAAG,CAAC;MAAE,CAAC,CAAC,CAAC,CAAC;IAC5D,CAAC,SAAS;MACNG,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;;EAED;EACAhB,SAAS,CAAC,MAAM;IACZmB,iBAAiB,CAAC,CAAC,CAAC,CAAC;EACzB,CAAC,EAAE,CAACZ,KAAK,CAAC,CAAC;EAEX,IAAIQ,OAAO,EAAE,oBAAOV,OAAA;IAAAqB,QAAA,EAAK;EAAoB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACnD,IAAIb,KAAK,EAAE,oBAAOZ,OAAA;IAAAqB,QAAA,EAAMT;EAAK;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EAEpC,oBACIzB,OAAA;IAAAqB,QAAA,gBACIrB,OAAA;MAAAqB,QAAA,GAAI,+BAA6B,EAACnB,KAAK;IAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC7CzB,OAAA,CAACH,GAAG;MAACW,IAAI,EAAEJ;IAAU;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvB,CAAC;AAEd,CAAC;AAACtB,EAAA,CAlDIF,QAAQ;AAAAyB,EAAA,GAARzB,QAAQ;AAoDd,eAAeA,QAAQ;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}