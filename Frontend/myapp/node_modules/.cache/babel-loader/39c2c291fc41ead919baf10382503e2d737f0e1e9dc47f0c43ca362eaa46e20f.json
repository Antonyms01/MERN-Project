{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERN\\\\Frontend\\\\myapp\\\\src\\\\Components\\\\BarChart.js\",\n  _s = $RefreshSig$();\n// src/components/BarChart.js\nimport { getBarChartData } from '../api/api';\nimport React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart, CategoryScale, LinearScale, BarElement, Title } from 'chart.js';\nimport './TransactionDashboard.css';\n// Register the required scales and elements\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale, LinearScale, BarElement, Title);\nconst BarChart = ({\n  month\n}) => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Number of Items',\n      data: [],\n      backgroundColor: 'rgba(75, 192, 192, 0.6)',\n      // Color for the bars\n      borderColor: 'rgba(75, 192, 192, 1)',\n      borderWidth: 1\n    }]\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Function to fetch bar chart data based on the selected month\n  const fetchBarChartData = async () => {\n    setLoading(true);\n    try {\n      const data = await getBarChartData(month); // Fetch bar chart data from the API\n      const labels = data.map(item => item.range); // Assuming your API returns an array of objects with a `range` property\n      const values = data.map(item => item.count); // Assuming your API returns an array of objects with a `count` property\n\n      setChartData({\n        labels,\n        datasets: [{\n          label: 'Number of Items',\n          data: values,\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\n          // Bar color\n          borderColor: 'rgba(75, 192, 192, 1)',\n          // Bar border color\n          borderWidth: 1\n        }]\n      });\n      setError(null); // Clear any previous errors\n    } catch (err) {\n      setError('Error fetching bar chart data');\n      setChartData({\n        labels: [],\n        datasets: [{\n          data: []\n        }]\n      }); // Clear chart data on error\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch bar chart data when the month changes\n  useEffect(() => {\n    fetchBarChartData(); // Fetch bar chart data when the component mounts or month changes\n  }, [month]); // Only include 'month' in the dependency array\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading bar chart...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '50%',\n      height: '4  00px',\n      margin: '0 auto'\n    },\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: [\"Items Distribution by Price Range for \", month]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false // Set to false to allow custom sizing\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(BarChart, \"S2uatAKBPRbdfbG2f5lHG87zXeM=\");\n_c = BarChart;\nexport default BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["getBarChartData","React","useEffect","useState","Bar","Chart","CategoryScale","LinearScale","BarElement","Title","jsxDEV","_jsxDEV","register","BarChart","month","_s","chartData","setChartData","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","loading","setLoading","error","setError","fetchBarChartData","map","item","range","values","count","err","children","fileName","_jsxFileName","lineNumber","columnNumber","style","width","height","margin","textAlign","options","responsive","maintainAspectRatio","_c","$RefreshReg$"],"sources":["D:/MERN/Frontend/myapp/src/Components/BarChart.js"],"sourcesContent":["// src/components/BarChart.js\r\nimport { getBarChartData } from '../api/api';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart, CategoryScale, LinearScale, BarElement, Title } from 'chart.js';\r\nimport './TransactionDashboard.css';\r\n// Register the required scales and elements\r\nChart.register(CategoryScale, LinearScale, BarElement, Title);\r\n\r\nconst BarChart = ({ month }) => {\r\n    const [chartData, setChartData] = useState({\r\n        labels: [],\r\n        datasets: [{\r\n            label: 'Number of Items',\r\n            data: [],\r\n            backgroundColor: 'rgba(75, 192, 192, 0.6)', // Color for the bars\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            borderWidth: 1,\r\n        }],\r\n    });\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Function to fetch bar chart data based on the selected month\r\n    const fetchBarChartData = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const data = await getBarChartData(month); // Fetch bar chart data from the API\r\n            const labels = data.map(item => item.range); // Assuming your API returns an array of objects with a `range` property\r\n            const values = data.map(item => item.count); // Assuming your API returns an array of objects with a `count` property\r\n\r\n            setChartData({\r\n                labels,\r\n                datasets: [{\r\n                    label: 'Number of Items',\r\n                    data: values,\r\n                    backgroundColor: 'rgba(75, 192, 192, 0.6)', // Bar color\r\n                    borderColor: 'rgba(75, 192, 192, 1)', // Bar border color\r\n                    borderWidth: 1\r\n                }],\r\n            });\r\n            setError(null); // Clear any previous errors\r\n        } catch (err) {\r\n            setError('Error fetching bar chart data');\r\n            setChartData({ labels: [], datasets: [{ data: [] }] }); // Clear chart data on error\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Fetch bar chart data when the month changes\r\n    useEffect(() => {\r\n        fetchBarChartData(); // Fetch bar chart data when the component mounts or month changes\r\n    }, [month]); // Only include 'month' in the dependency array\r\n\r\n    if (loading) return <div>Loading bar chart...</div>;\r\n    if (error) return <div>{error}</div>;\r\n\r\n    return (\r\n        <div style={{ width: '50%', height: '4  00px', margin: '0 auto' }}> {/* Adjusted width and height */}\r\n            <h3 style={{ textAlign: 'center' }}>Items Distribution by Price Range for {month}</h3>\r\n            <Bar data={chartData} options={{\r\n                responsive: true,\r\n                maintainAspectRatio: false // Set to false to allow custom sizing\r\n            }} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BarChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}