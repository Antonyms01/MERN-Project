{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERN\\\\Frontend\\\\myapp\\\\src\\\\Components\\\\TransactionDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getTransactions } from '../api/api'; // Assuming API call function is here\nimport './TransactionDashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nconst searchTypes = [{\n  value: 'title',\n  label: 'Title'\n}, {\n  value: 'description',\n  label: 'Description'\n}, {\n  value: 'price',\n  label: 'Price'\n}];\nconst TransactionDashboard = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [month, setMonth] = useState('March'); // Default to March\n  const [searchText, setSearchText] = useState('');\n  const [searchType, setSearchType] = useState('title'); // Default search type\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(10); // Default 10 items per page\n\n  const fetchTransactions = async () => {\n    setLoading(true);\n    try {\n      const data = await getTransactions(month, searchText, searchType, page, perPage);\n      setTransactions(data.transactions);\n    } catch (err) {\n      setError('Error fetching transactions');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSearch = () => {\n    setPage(1); // Reset to page 1 on search\n    fetchTransactions(); // Fetch transactions when search button is clicked\n  };\n  const handleMonthChange = e => {\n    setMonth(e.target.value);\n    setPage(1); // Reset to page 1 on month change\n    fetchTransactions(); // Fetch transactions when month changes\n  };\n  const handleSearchTypeChange = e => {\n    setSearchType(e.target.value); // Update search type\n  };\n  const handleSearchChange = e => {\n    setSearchText(e.target.value); // Update the search text state\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transaction-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Transaction Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleSearchTypeChange,\n        value: searchType,\n        children: searchTypes.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: type.value,\n          children: type.label\n        }, type.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search transaction\",\n        value: searchText,\n        onChange: handleSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: month,\n        onChange: handleMonthChange,\n        children: months.map((m, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: m,\n          children: m\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionDashboard, \"9rtyFvjpGtzMW73sJdlwuyFQnTc=\");\n_c = TransactionDashboard;\nexport default TransactionDashboard;\nvar _c;\n$RefreshReg$(_c, \"TransactionDashboard\");","map":{"version":3,"names":["React","useState","useEffect","getTransactions","jsxDEV","_jsxDEV","months","searchTypes","value","label","TransactionDashboard","_s","transactions","setTransactions","loading","setLoading","error","setError","month","setMonth","searchText","setSearchText","searchType","setSearchType","page","setPage","perPage","setPerPage","fetchTransactions","data","err","handleSearch","handleMonthChange","e","target","handleSearchTypeChange","handleSearchChange","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","type","placeholder","onClick","m","index","_c","$RefreshReg$"],"sources":["D:/MERN/Frontend/myapp/src/Components/TransactionDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getTransactions } from '../api/api'; // Assuming API call function is here\r\nimport './TransactionDashboard.css';\r\n\r\nconst months = [\r\n  \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \r\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];\r\n\r\nconst searchTypes = [\r\n  { value: 'title', label: 'Title' },\r\n  { value: 'description', label: 'Description' },\r\n  { value: 'price', label: 'Price' }\r\n];\r\n\r\nconst TransactionDashboard = () => {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [month, setMonth] = useState('March'); // Default to March\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchType, setSearchType] = useState('title'); // Default search type\r\n  const [page, setPage] = useState(1);\r\n  const [perPage, setPerPage] = useState(10); // Default 10 items per page\r\n\r\n  const fetchTransactions = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const data = await getTransactions(month, searchText, searchType, page, perPage);\r\n      setTransactions(data.transactions);\r\n    } catch (err) {\r\n      setError('Error fetching transactions');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    setPage(1); // Reset to page 1 on search\r\n    fetchTransactions(); // Fetch transactions when search button is clicked\r\n  };\r\n\r\n  const handleMonthChange = (e) => {\r\n    setMonth(e.target.value);\r\n    setPage(1); // Reset to page 1 on month change\r\n    fetchTransactions(); // Fetch transactions when month changes\r\n  };\r\n\r\n  const handleSearchTypeChange = (e) => {\r\n    setSearchType(e.target.value); // Update search type\r\n  };\r\n\r\n  const handleSearchChange = (e) => {\r\n    setSearchText(e.target.value); // Update the search text state\r\n  };\r\n\r\n  return (\r\n    <div className=\"transaction-dashboard\">\r\n      <h2>Transaction Dashboard</h2>\r\n      <div className=\"controls\">\r\n        <select onChange={handleSearchTypeChange} value={searchType}>\r\n          {searchTypes.map((type) => (\r\n            <option key={type.value} value={type.value}>{type.label}</option>\r\n          ))}\r\n        </select>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search transaction\"\r\n          value={searchText}\r\n          onChange={handleSearchChange}\r\n        />\r\n        <button onClick={handleSearch}>Search</button>\r\n        <select value={month} onChange={handleMonthChange}>\r\n          {months.map((m, index) => (\r\n            <option key={index} value={m}>{m}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      {/* Render transactions table */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}